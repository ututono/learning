1.只利用一个监听器以及多个if语句来决定产生的事件
##新建一个监听器的类
Actionevent A1=new Actionevent(Font.PLAIN);    //给每个字体构造一个对象，并将其设置为按钮监听器
			Actionevent A2=new Actionevent(Font.BOLD);
			Actionevent A3=new Actionevent(Font.ITALIC);
			r1.addActionListener(A1);   	//等价于r1.addActionListener(new Actionevent(Font BOLD));
			r2.addActionListener(A2);
			r3.addActionListener(A3);
   r1.addActionListener(new Actionevent(Font.PLAIN));
			r2.addActionListener(new Actionevent(Font.BOLD));
			r3.addActionListener(new Actionevent(Font.ITALIC));
			this.setSize(800, 300);
		}
	    //@Override
		class Actionevent implements ActionListener{   //只有一个监听器Actionevent
			private int f;
			Actionevent(int x){
				this.f=x;
			}
	    	public void actionPerformed(ActionEvent e){
	    		if(f==0) b1.setFont(new Font(b1.getName(),Font.PLAIN,20));
	    		else if(f==1) b1.setFont(new Font(b1.getName(),Font.BOLD,20));
	    		else if(f==2) b1.setFont(new Font(b1.getName(),Font.ITALIC,20));
	    	}
		}
利用一个监听器来处理事件的缺点是，当程序比较复杂时，需要一大串的if 语句来实现，程序代码较难阅读与维护。当然，如果处理的事件较少，这种方式比较简单。

2.通过匿名内部类来实现
##在注册监听器时new一个ActionListener的实例
r1.addActionListener(
					new ActionListener(){   //new一个ActionListener的实例，并在其中用重写actionPerformed(ActionEvent e);
						public void actionPerformed(ActionEvent e){
				    		 b1.setFont(new Font(b1.getName(),Font.PLAIN,20));
				    	}
					});
		r2.addActionListener(
					new ActionListener(){
						public void actionPerformed(ActionEvent e){
				    		b1.setFont(new Font(b1.getName(),Font.BOLD,20));
						}
					});
		r3.addActionListener(
					new ActionListener(){
						public void actionPerformed(ActionEvent e){
				    		b1.setFont(new Font(b1.getName(),Font.ITALIC,20));
						}
					});
　使用匿名内部类同样存在许多另外的问题。首先，根据组件在代码中被定义的不同位置，类的定义以及处理事件的代码将分散在程序的各个部分，不是集中在一块，同样不便于阅读与维护。各事件的处理全部由嵌套的程序块组成，视觉上很难定位程序代码。如果事件处理程序比较复杂，内部类中的代码将变得很长，你将找不到相应的组件定义位置。最后，当工具栏、菜单栏目等需要处理同样的用户行为时，该方法将使代码更难维护。
　　
　　我们使用一般的命名内部类可以解决以上许多问题。所有的事件处理方法都集中在一块，并且都具有有意义的名称，程序非常容易阅读与维护。单个的事件处理程序也可以被工具栏、菜单栏等重复使用.

3.通过一般的内部类
#创造多个监听器的类
r1.addActionListener(new Actionevent1());
	      r2.addActionListener(new Actionevent2());
	      r3.addActionListener(new Actionevent3());
	      this.setSize(800, 300);
		}
	    //@Override
		class Actionevent1 implements ActionListener{
	    	public void actionPerformed(ActionEvent e){
	    		 b1.setFont(new Font(b1.getName(),Font.PLAIN,20));
	    	}
		}
		class Actionevent2 implements ActionListener{
	    	public void actionPerformed(ActionEvent e){
	    		 b1.setFont(new Font(b1.getName(),Font.BOLD,20));
	    	}
		}
		class Actionevent3 implements ActionListener{
	    	public void actionPerformed(ActionEvent e){
	    		 b1.setFont(new Font(b1.getName(),Font.ITALIC,20));
	    	}
		}
